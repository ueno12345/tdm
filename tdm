#!/bin/bash
# vimÈ¢®TUI TODOÁÆ°ÁêÜ„ÉÑ„Éº„É´

# ------------------------------
# „Éò„É´„ÉóË°®Á§∫
# ------------------------------
show_help() {
  cat <<EOF
Usage: $0 [options]

Options:
  -h, --help        „Åì„ÅÆ„Éò„É´„Éó„ÇíË°®Á§∫
  -d YYYYMMDD       ÊåáÂÆöÊó•„ÅßTODO„ÇíËµ∑ÂãïÔºà„Éá„Éï„Ç©„É´„Éà: ‰ªäÊó•Ôºâ
  -b DIR            TODO„Éï„Ç°„Ç§„É´‰øùÂ≠ò„Éô„Éº„Çπ„Éá„Ç£„É¨„ÇØ„Éà„É™ÊåáÂÆöÔºà„Éá„Éï„Ç©„É´„Éà: \$HOME/Documents/todo_listÔºâ

TUIÊìç‰Ωú‰∏ÄË¶ß:
  j/k               ‰∏ä‰∏ãÁßªÂãï
  h/l               ÂâçÊó•/ÁøåÊó•ÂàáÊõø
  Enter             ÈÅ∏Êäû‰∏≠„ÅÆ„Çø„Çπ„ÇØÂÆå‰∫Ü/Êú™ÂÆå‰∫ÜÂàáÊõø
  -                 ÈÅ∏Êäû‰∏≠„ÅÆ„Çø„Çπ„ÇØ„Çí„ÄåË¶ãÈÄÅ„Çä„Äç„Å´Â§âÊõ¥
  1                 Êú™ÂÆå‰∫Ü [ ] „Å´Â§âÊõ¥
  2                 È´òÂÑ™ÂÖàÂ∫¶ [!] „Å´Â§âÊõ¥
  3                 ‰∏≠ÂÑ™ÂÖàÂ∫¶ [~] „Å´Â§âÊõ¥
  4                 ‰ΩéÂÑ™ÂÖàÂ∫¶ [.] „Å´Â§âÊõ¥
  a                 „Çø„Çπ„ÇØËøΩÂä†Ôºà„Çø„Ç∞ÈÅ∏Êäû ‚Üí ÂÜÖÂÆπÂÖ•ÂäõÔºâ
  f                 „Éï„Ç£„É´„ÇøÂàáÊõøÔºöÂÖ®„Å¶ / Êú™ÂÆå‰∫Ü / ÂÆå‰∫Ü
  q                 ‰øùÂ≠ò„Åó„Å¶ÁµÇ‰∫Ü

Ëá™ÂãïËøΩÂä†Ê©üËÉΩ:
  - „É´„Éº„ÉÜ„Ç£„É≥„Çø„Çπ„ÇØÔºàÂã§ÂãôÂΩ¢ÊÖã„Å´Âøú„Åò„Å¶Ëá™ÂãïËøΩÂä†Ôºâ
  - ÂâçÂõûÊú™ÂÆå‰∫Ü„Çø„Çπ„ÇØ„Çí„Ç≥„Éî„Éº
  - ÊúàÂ†±„Çø„Çπ„ÇØÔºà„Åù„ÅÆÊúà„ÅÆÊúÄÂàù„ÅÆÂá∫Âã§Êó•„Å´Ëá™ÂãïËøΩÂä†Ôºâ
  - ÈÄ±Â†±„Çø„Çπ„ÇØÔºà„Åù„ÅÆÈÄ±„ÅÆÊúÄÂàù„ÅÆÂá∫Âã§Êó•„Å´Ëá™ÂãïËøΩÂä†Ôºâ
EOF
  exit 0
}

# ------------------------------
# ÂºïÊï∞Âá¶ÁêÜ
# ------------------------------
BASE_DIR="$HOME/Documents/todo_list"
TODAY=$(date +%Y%m%d)
WORK_TYPE="shukkin"
FILTER_MODE="all"

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help) show_help ;;
    -d) TODAY="$2"; shift 2 ;;
    -b) BASE_DIR="$2"; shift 2 ;;
    *) echo "Unknown option: $1"; show_help ;;
  esac
done

YEAR_MONTH=${TODAY:0:6}
TODO_DIR="$BASE_DIR/$YEAR_MONTH"
mkdir -p "$TODO_DIR"

TODO_FILE="$TODO_DIR/$TODAY.txt"
NEW_FILE=false
[[ ! -e "$TODO_FILE" ]] && NEW_FILE=true
touch "$TODO_FILE"

# ------------------------------
# ÂâçÂõûÊú™ÂÆå‰∫Ü„Çø„Çπ„ÇØ„Ç≥„Éî„Éº
# ------------------------------
copy_pending_from_last_file() {
  [[ -s "$TODO_FILE" ]] && return
  last_file=$(find "$BASE_DIR" -type f -name "*.txt" ! -path "$TODO_FILE" | sort | tail -n1)
  [[ -z "$last_file" ]] && return
  grep -v '^\[x\]' "$last_file" >> "$TODO_FILE"
}

copy_pending_from_last_file

# ------------------------------
# Âã§ÂãôÂΩ¢ÊÖãÈÅ∏Êäû
# ------------------------------
echo "==============================="
echo "Âã§ÂãôÂΩ¢ÊÖã„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ:"
echo "1: Âá∫Âã§  2: Âú®ÂÆÖ  3: Âá∫Âºµ"
echo "==============================="
read -rp "Áï™Âè∑„ÇíÂÖ•Âäõ: " type_choice
case "$type_choice" in
  1) WORK_TYPE="shukkin" ;;
  2) WORK_TYPE="zaitaku" ;;
  3) WORK_TYPE="syucchou" ;;
  *) WORK_TYPE="shukkin" ;;
esac

# ------------------------------
# Êñ∞Ë¶è‰ΩúÊàêÊôÇ„Å´„É´„Éº„ÉÜ„Ç£„É≥„ÉªÊúàÂ†±„ÉªÈÄ±Â†±„ÇíËøΩÂä†
# ------------------------------
if $NEW_FILE; then
  # „É´„Éº„ÉÜ„Ç£„É≥„Çø„Çπ„ÇØ
  ROUTINE_FILE="$BASE_DIR/template/routine_${WORK_TYPE}.txt"
  [[ -f "$ROUTINE_FILE" ]] && grep -Fxv -f "$TODO_FILE" "$ROUTINE_FILE" >> "$TODO_FILE"

  # ÊúàÂ†±ÔºöÊúà„ÅÆÊúÄÂàù„ÅÆÂá∫Âã§Êó•„Å´Ëá™ÂãïËøΩÂä†
  DAY_NUM=$(date -d "$TODAY" +%d | sed 's/^0//')
  if [[ $DAY_NUM -eq 1 ]]; then
    echo "[!] ÊúàÂ†±„Çø„Çπ„ÇØ" >> "$TODO_FILE"
  fi

  # ÈÄ±Â†±Ôºö„Åù„ÅÆÈÄ±„ÅÆÊúÄÂàù„ÅÆÂá∫Âã§Êó•„Å´Ëá™ÂãïËøΩÂä†ÔºàÂπ≥Êó•Êâ±„ÅÑÔºâ
  WEEKDAY=$(date -d "$TODAY" +%u) # 1=ÊúàÊõú
  if [[ $WEEKDAY -eq 1 ]]; then
    echo "[~] ÈÄ±Â†±„Çø„Çπ„ÇØ" >> "$TODO_FILE"
  fi
fi

# ------------------------------
# TUIÈñ¢Êï∞
# ------------------------------
clear_screen() { printf "\033[2J\033[H"; }
hide_cursor()  { printf "\033[?25l"; }
show_cursor()  { printf "\033[?25h"; }

read_tasks() { mapfile -t TASKS < "$TODO_FILE"; }

draw_screen() {
  clear_screen

  # „Éï„Ç£„É´„ÇøÈÅ©Áî®
  DISPLAY_TASKS=()
  DISPLAY_INDEX_MAP=()
  for i in "${!TASKS[@]}"; do
    t="${TASKS[$i]}"
    [[ -z "$t" ]] && continue
    case "$FILTER_MODE" in
      active) [[ "$t" =~ ^\[x\] ]] && continue ;;
      done)   [[ ! "$t" =~ ^\[x\] ]] && continue ;;
      all) ;;
    esac
    DISPLAY_TASKS+=("$t")
    DISPLAY_INDEX_MAP+=("$i")
  done

  [[ ${#DISPLAY_TASKS[@]} -eq 0 ]] && DISPLAY_TASKS=("Ôºà„Çø„Çπ„ÇØ„Åå„ÅÇ„Çä„Åæ„Åõ„ÇìÔºâ") && DISPLAY_INDEX_MAP=(0)
  [[ $CURSOR -ge ${#DISPLAY_TASKS[@]} ]] && CURSOR=$((${#DISPLAY_TASKS[@]}-1))
  [[ $CURSOR -lt 0 ]] && CURSOR=0

  width=70
  echo "======================================================="
  printf "                    TODO LIST\n"
  printf "           Êó•‰ªò: %s  „Éï„Ç£„É´„Çø: %s\n" "$TODAY" "$FILTER_MODE"
  echo "-------------------------------------------------------"

  for i in "${!DISPLAY_TASKS[@]}"; do
    task="${DISPLAY_TASKS[$i]}"
    prefix="   "
    [ "$i" -eq "$CURSOR" ] && prefix="üëâ "

    case "$task" in
      "[x]"*) color="\033[90m" ;;
      "[-]"*) color="\033[36m" ;; # Ë¶ãÈÄÅ„Çä„ÅØ„Ç∑„Ç¢„É≥
      "[!]"*) color="\033[31m" ;;
      "[~]"*) color="\033[33m" ;;
      "[.]"*) color="\033[34m" ;;
      "[ ]"*) color="\033[0m" ;;
      *) color="\033[0m" ;;
    esac

    echo -e "${prefix}${color}${task}\033[0m"
  done

  echo "-------------------------------------------------------"
  echo "Êìç‰Ωú: [h/l]ÂâçÊó•/ÁøåÊó•  [j/k]ÁßªÂãï  [Enter]ÂÆå‰∫Ü [-]Ë¶ãÈÄÅ„Çä "
  echo "      [a]ËøΩÂä†  [f]„Éï„Ç£„É´„Çø  [q]ÁµÇ‰∫Ü"
  echo "„Çø„Ç∞: [x]ÂÆå‰∫Ü  [ ]Êú™ÂÆå‰∫Ü  [-]Ë¶ãÈÄÅ„Çä  [!]È´ò  [~]‰∏≠  [.]‰Ωé"
  echo "======================================================="
}

toggle_done() {
  [[ ${#DISPLAY_TASKS[@]} -eq 0 ]] && return
  line_index=${DISPLAY_INDEX_MAP[$CURSOR]}
  line="${TASKS[$line_index]}"
  case "$line" in
    "[ ] "*| "[-]"*) TASKS[$line_index]="[x]${line:3}" ;;
    "[x]"*) TASKS[$line_index]="[ ]${line:3}" ;;
  esac
}

mark_pending() {
  [[ ${#DISPLAY_TASKS[@]} -eq 0 ]] && return
  line_index=${DISPLAY_INDEX_MAP[$CURSOR]}
  TASKS[$line_index]="[-]${TASKS[$line_index]:3}"
}

delete_task() {
  [[ ${#DISPLAY_TASKS[@]} -eq 0 ]] && return
  line_index=${DISPLAY_INDEX_MAP[$CURSOR]}
  unset 'TASKS[$line_index]'
  TASKS=("${TASKS[@]}")
  ((CURSOR>0)) && ((CURSOR--))
}

save_tasks() { printf "%s\n" "${TASKS[@]}" > "$TODO_FILE"; }

add_task() {
  show_cursor
  echo "„Çø„Ç∞„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ:"
  echo "1: [ ] Êú™ÂÆå‰∫Ü  2: [!] È´ò  3: [~] ‰∏≠  4: [.] ‰Ωé  5: [-] Ë¶ãÈÄÅ„Çä"
  read -rp "Áï™Âè∑„ÇíÂÖ•Âäõ („Éá„Éï„Ç©„É´„Éà 1): " tag_choice
  case "$tag_choice" in
    2) tag="[!]" ;;
    3) tag="[~]" ;;
    4) tag="[.]" ;;
    5) tag="[-]" ;;
    *) tag="[ ]" ;;
  esac
  read -rp "„Çø„Çπ„ÇØÂÜÖÂÆπ: " newtask
  [[ -n "$newtask" ]] && echo "$tag $newtask" >> "$TODO_FILE" && read_tasks
  hide_cursor
}

change_tag() {
  [[ ${#DISPLAY_TASKS[@]} -eq 0 ]] && return
  newtag=$1
  line_index=${DISPLAY_INDEX_MAP[$CURSOR]}
  TASKS[$line_index]="$newtag${TASKS[$line_index]:3}"
}

change_day_existing() {
  direction=$1
  CURRENT_YEAR_MONTH=${TODAY:0:6}
  TODO_DIR="$BASE_DIR/$CURRENT_YEAR_MONTH"
  mkdir -p "$TODO_DIR"

  files=( $(ls "$TODO_DIR"/*.txt 2>/dev/null | sort) )
  [[ ${#files[@]} -eq 0 ]] && return

  dates=( "${files[@]##*/}" )
  for i in "${!dates[@]}"; do dates[$i]="${dates[$i]%.txt}"; done

  newdate=""
  if [[ $direction == "prev" ]]; then
    for d in "${dates[@]}"; do
      [[ $d -lt $TODAY ]] && newdate=$d || break
    done
  elif [[ $direction == "next" ]]; then
    for d in "${dates[@]}"; do
      [[ $d -gt $TODAY ]] && { newdate=$d; break; }
    done
  fi

  if [[ -n "$newdate" ]]; then
    TODAY="$newdate"
    YEAR_MONTH=${TODAY:0:6}
    TODO_DIR="$BASE_DIR/$YEAR_MONTH"
    TODO_FILE="$TODO_DIR/$TODAY.txt"
    touch "$TODO_FILE"
    read_tasks
    CURSOR=0
  fi
}

# ------------------------------
# „É°„Ç§„É≥„É´„Éº„Éó
# ------------------------------
main() {
  read_tasks
  CURSOR=0
  hide_cursor
  trap "show_cursor; clear_screen; exit" INT TERM

  keybuf=""
  while true; do
    draw_screen
    read -rsn1 key
    keybuf+="$key"
    [[ "$key" == $'\e' ]] && keybuf="" && continue

    case "$keybuf" in
      h) change_day_existing prev; keybuf="" ;;
      l) change_day_existing next; keybuf="" ;;
      j) ((CURSOR++)); ((CURSOR>=${#DISPLAY_TASKS[@]})) && CURSOR=$((${#DISPLAY_TASKS[@]}-1)); keybuf="" ;;
      k) ((CURSOR--)); ((CURSOR<0)) && CURSOR=0; keybuf="" ;;
      x) delete_task; keybuf="" ;;
      "") toggle_done; keybuf="" ;;
      -) mark_pending; keybuf="" ;;
      a) add_task; keybuf="" ;;
      f)
         case "$FILTER_MODE" in
           all) FILTER_MODE="active" ;;
           active) FILTER_MODE="done" ;;
           done) FILTER_MODE="all" ;;
         esac
         CURSOR=0
         keybuf=""
         ;;
      1) change_tag "[ ]"; keybuf="" ;;
      2) change_tag "[!]"; keybuf="" ;;
      3) change_tag "[~]"; keybuf="" ;;
      4) change_tag "[.]"; keybuf="" ;;
      q) save_tasks; show_cursor; clear_screen; echo "ÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ"; exit 0 ;;
      *) [[ "${#keybuf}" -gt 2 ]] && keybuf="" ;;
    esac
  done
}

main

